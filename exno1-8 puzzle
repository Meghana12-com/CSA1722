import heapq

class PuzzleState:
    goal_state = [1, 2, 3, 4, 5, 6, 7, 8, 0]

    def _init_(self, state, parent=None, move=0):
        self.state = state
        self.parent = parent
        self.move = move
        self.cost = self.calculate_cost()

    def calculate_cost(self):
        cost = 0
        for i in range(9):
            if self.state[i] != self.goal_state[i]:
                cost += 1
        return cost

    def _lt_(self, other):
        return self.cost < other.cost

    def _eq_(self, other):
        return self.state == other.state

    def _hash_(self):
        return hash(tuple(self.state))

    def get_children(self):
        children = []
        zero_index = self.state.index(0)
        moves = [(1, 3), (-1, -3), (3, 1), (-3, -1)]
        for move in moves:
            new_index = zero_index + move[0]
            if 0 <= new_index < 9 and (new_index // 3 == zero_index // 3) or (new_index % 3 == zero_index % 3):
                new_state = self.state[:]
                new_state[zero_index], new_state[new_index] = new_state[new_index], new_state[zero_index]
                children.append(PuzzleState(new_state, self, self.move + 1))
        return children

def print_solution(state):
    if state.parent is None:
        print(state.state[:3])
        print(state.state[3:6])
        print(state.state[6:])
        print()
    else:
        print_solution(state.parent)
        print(state.state[:3])
        print(state.state[3:6])
        print(state.state[6:])
        print()

def solve_puzzle(initial_state):
    visited = set()
    pq = []
    heapq.heappush(pq, initial_state)
    while pq:
        current_state = heapq.heappop(pq)
        if current_state.state == PuzzleState.goal_state:
            print("Solution found!")
            print_solution(current_state)
            return
        visited.add(current_state)
        children = current_state.get_children()
        for child in children:
            if child not in visited:
                heapq.heappush(pq, child)

if _name_ == "_main_":
    initial_state = PuzzleState([1, 2, 3, 4, 5, 6, 7, 8, 0])
    solve_puzzle(initial_state)
