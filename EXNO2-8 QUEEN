def is_safe(board, row, col):
    # Check if there is a queen in the same column
    for i in range(row):
        if board[i] == col:
            return False
    
    # Check upper diagonal on left side
    for i, j in zip(range(row-1, -1, -1), range(col-1, -1, -1)):
        if board[i] == j:
            return False
    
    # Check upper diagonal on right side
    for i, j in zip(range(row-1, -1, -1), range(col+1, len(board))):
        if board[i] == j:
            return False
    
    return True

def solve_queens(board, row):
    if row >= len(board):
        return True

    for col in range(len(board)):
        if is_safe(board, row, col):
            board[row] = col
            if solve_queens(board, row + 1):
                return True
            board[row] = -1  # backtrack

    return False

def print_solution(board):
    for row in board:
        line = ['Q' if i == col else '.' for i in range(len(board))]
        print(' '.join(line))
        
def solve_n_queens(n):
    board = [-1] * n
    if solve_queens(board, 0):
        print_solution(board)
    else:
        print("No solution exists.")

if __name__ == "__main__":
    solve_n_queens(8)
