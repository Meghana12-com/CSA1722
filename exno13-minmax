import math

def evaluate(board):
    """
    Function to evaluate the current state of the board.
    Returns +1 if the computer wins, -1 if the player wins, and 0 if it's a tie.
    """
    # Check rows, columns, and diagonals for a win
    for i in range(3):
        if board[i][0] == board[i][1] == board[i][2]:
            if board[i][0] == 'X':
                return +1
            elif board[i][0] == 'O':
                return -1
        if board[0][i] == board[1][i] == board[2][i]:
            if board[0][i] == 'X':
                return +1
            elif board[0][i] == 'O':
                return -1
    if board[0][0] == board[1][1] == board[2][2]:
        if board[0][0] == 'X':
            return +1
        elif board[0][0] == 'O':
            return -1
    if board[0][2] == board[1][1] == board[2][0]:
        if board[0][2] == 'X':
            return +1
        elif board[0][2] == 'O':
            return -1

    # Check for a tie
    for i in range(3):
        for j in range(3):
            if board[i][j] == '_':
                return None
    return 0

def minimax(board, depth, isMax):
    """
    The minimax function which recursively evaluates all possible moves.
    """
    score = evaluate(board)

    # If the computer wins return their score
    if score == 1:
        return score

    # If the player wins return their score
    if score == -1:
        return score

    # If it's a tie return 0
    if score == 0:
        return 0

    # If it's the computer's turn
    if isMax:
        best = -math.inf
        for i in range(3):
            for j in range(3):
                # Check if cell is empty
                if board[i][j] == '_':
                    # Make the move
                    board[i][j] = 'X'
                    # Recursively evaluate the board
                    best = max(best, minimax(board, depth + 1, not isMax))
                    # Undo the move
                    board[i][j] = '_'
        return best
    else:
        best = math.inf
        for i in range(3):
            for j in range(3):
                # Check if cell is empty
                if board[i][j] == '_':
                    # Make the move
                    board[i][j] = 'O'
                    # Recursively evaluate the board
                    best = min(best, minimax(board, depth + 1, not isMax))
                    # Undo the move
                    board[i][j] = '_'
        return best

def findBestMove(board):
    """
    Function to find the best move for the computer.
    """
    bestVal = -math.inf
    bestMove = (-1, -1)

    for i in range(3):
        for j in range(3):
            if board[i][j] == '_':
                board[i][j] = 'X'
                moveVal = minimax(board, 0, False)
                board[i][j] = '_'
                if moveVal > bestVal:
                    bestMove = (i, j)
                    bestVal = moveVal

    return bestMove

def printBoard(board):
    """
    Function to print the Tic Tac Toe board.
    """
    for row in board:
        print(" ".join(row))
    print()

def main():
    """
    Main function to run the game.
    """
    board = [['_', '_', '_'],
             ['_', '_', '_'],
             ['_', '_', '_']]

    print("Tic Tac Toe Game")
    print("Empty cells are denoted by '_'\n")

    print("Initial Board:")
    printBoard(board)

    while evaluate(board) is None:
        player_row = int(input("Enter row (0, 1, 2): "))
        player_col = int(input("Enter column (0, 1, 2): "))
        if board[player_row][player_col] == '_':
            board[player_row][player_col] = 'O'
            print("Player's move:")
            printBoard(board)

            if evaluate(board) is not None:
                break

            print("Computer's move:")
            computer_move = findBestMove(board)
            board[computer_move[0]][computer_move[1]] = 'X'
            printBoard(board)
        else:
            print("Invalid move. Try again.")

    result = evaluate(board)
    if result == 1:
        print("Computer wins!")
    elif result == -1:
        print("Player wins!")
    else:
        print("It's a tie!")

if __name__ == "__main__":
    main()
